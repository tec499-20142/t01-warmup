// +UEFSHDR----------------------------------------------------------------------
// 2014 UEFS Universidade Estadual de Feira de Santana
// TEC499-Sistemas Digitais
// ------------------------------------------------------------------------------
// TEAM: <Anderson Queiroz>
// ------------------------------------------------------------------------------
// PROJECT: <Warm Up>
// ------------------------------------------------------------------------------
// FILE NAME  : Teste_ula
// KEYWORDS 	: Teste
// -----------------------------------------------------------------------------
// PURPOSE: Faz a operação de soma e compara os resultados do modelo e do duv. Se ocorrer
//          uma diferenças nos resultados, exibe uma mensagem de error.
// -----------------------------------------------------------------------------

// topo da hierarquia no testbench. Sem sinais de entrada ou saida.
module testbench ();

// sinais para estímulo. Neste exemplo, definidos neste arquivo.
logic [7:0] data_a;
logic [7:0] data_b;
logic [7:0] operation;

// fios para interconexão entre os módulos.
logic [7:0] saida_duv, saida_modelo;
logic houve_erro;

// conexões
ula_duv duv (.data_a(data_a),.data_b(data_b),.operation(operation),.outAlu(saida_duv));
ula_modelo referencia(.data_a(data_a),.data_b(data_b),.operation(operation),.outAlu(saida_modelo));
output_checker comparador (.a(saida_duv),.b(saida_modelo),.diff(houve_erro));

initial // você pode ter várias construções initial-begin-end, tal como
begin // múltiplos always_comb em um mesmo module
data_a=8'b1;
data_b=8'b1;
operation = 8'b00101011; 
$display ("PASSOU: Não há bugs!!");
$stop; // a simulação pára
end

always @(posedge houve_erro) // sempre que houver borda positiva do houve_erro
begin
$display ("FALHOU: Há bugs!!"); // mensagem
#10; // aguarda um pouco
$stop; // a simulação pára (antes que a mensagem PASSOU apareça!)
end
endmodule

module ula_modelo(input [7:0] data_a, data_b, operation, output logic [7:0] outAlu);

	always_comb 
	begin 
		case(operation[7:0])
			8'b00101011: 
					outAlu = data_a + data_b;
			8'b00101101: 
					outAlu = data_a - data_b;
			8'b00101010:
					outAlu = data_a * data_b;
			8'b00101111:
					outAlu = data_a / data_b;
			8'b00100110:
					outAlu = data_a & data_b;
			8'b01111100: 
					outAlu = data_a | data_b;
			default
					outAlu = 16'd0;
		endcase	  	
	end
	
	endmodule


module ula_duv(input [7:0] data_a, data_b, operation, output logic [7:0] outAlu);

	always_comb 
	begin 
		case(operation[7:0])
			8'b00101011: 
					outAlu = data_a + data_b;
			8'b00101101: 
					outAlu = data_a - data_b;
			8'b00101010:
					outAlu = data_a * data_b;
			8'b00101111:
					outAlu = data_a / data_b;
			8'b00100110:
					outAlu = data_a & data_b;
			8'b01111100: 
					outAlu = data_a | data_b;
			default
					outAlu = 16'd0;
		endcase	  	
	end
	
	endmodule
	
	
	module output_checker (input [7:0] a, b, output logic diff);
    always_comb
      if (a!=b)
        diff=1'b1;
      else
        diff=1'b0;
  endmodule

